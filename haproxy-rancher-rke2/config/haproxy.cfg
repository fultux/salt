{% set ip_loadbalancer_int = salt['pillar.get']('haproxy:ip_loadbalancer_int') %}
{% set ip_loadbalancer_ext = salt['pillar.get']('haproxy:ip_loadbalancer_ext') %}
{% set node1_name = salt['pillar.get']('haproxy:node1_name') %}
{% set node2_name = salt['pillar.get']('haproxy:node2_name') %}
{% set node3_name = salt['pillar.get']('haproxy:node3_name') %}
{% set node1_fqdn = salt['pillar.get']('haproxy:node1_fqdn') %}
{% set node2_fqdn = salt['pillar.get']('haproxy:node2_fqdn') %}
{% set node3_fqdn = salt['pillar.get']('haproxy:node3_fqdn') %}

## Managed by Suse Manager ## 
#Inspired by the works by Martin Weiss here : https://github.com/Martin-Weiss/susemanager-stuff/blob/master/states/load-balancer-config/etc/haproxy/haproxy.cfg
global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Added in 'global' AND 'defaults'!!! - global affects only system limits (ulimit/maxsock) and defaults affects only listen/backend-limits - hez
        maxconn 400000

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        tune.ssl.default-dh-param 2048

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        mode tcp
        log     global
        option  tcplog
        option  redispatch
        option  tcpka
        option  dontlognull
        retries 2
        timeout connect 5s
        timeout client  5s
        timeout server  5s
        timeout tunnel  86400s
        # errorfile 400 /etc/haproxy/errors/400.http
        # errorfile 403 /etc/haproxy/errors/403.http
        # errorfile 408 /etc/haproxy/errors/408.http
        # errorfile 500 /etc/haproxy/errors/500.http
        # errorfile 502 /etc/haproxy/errors/502.http
        # errorfile 503 /etc/haproxy/errors/503.http
        # errorfile 504 /etc/haproxy/errors/504.http

        # general hardlimit for the process of connections to handle, this is separate to backend/listen
        # Added in 'global' AND 'defaults'!!! - global affects only system limits (ulimit/maxsock) and defaults affects only listen/backend-limits - hez
        maxconn 400000


listen stats
        bind *:9000
        mode http
        stats hide-version
        stats uri /stats

listen rancher_apiserver1
        bind {{ ip_loadbalancer_int }}:6443
        option httpchk GET /healthz
        http-check expect status 401
        server {{ node1_name }} {{ node1_fqdn }}:6443 check check-ssl verify none
        server {{ node2_name }} {{ node2_fqdn }}:6443 check check-ssl verify none
        server {{ node3_name }} {{ node3_fqdn }}:6443 check check-ssl verify none

listen rancher_register
        bind {{ ip_loadbalancer_int }}:9345
        option httpchk GET /ping
        http-check expect status 200
        server {{ node1_name }} {{ node1_fqdn }}:9345 check check-ssl verify none
        server {{ node2_name }} {{ node2_fqdn }}:9345 check check-ssl verify none
        server {{ node3_name }} {{ node3_fqdn }}:9345 check check-ssl verify none

listen rancher_ingress80
        bind {{ ip_loadbalancer_ext }}:80
        option httpchk GET /
        http-check expect status 404
        server {{ node1_name }} {{ node1_name }}.suse:80 check
        server {{ node2_name }} {{ node2_fqdn }}:80 check
        server {{ node3_name }} {{ node3_fqdn }}:80 check

listen rancher_ingress443
        bind {{ ip_loadbalancer_ext }}:443
        option httpchk GET /
        http-check expect status 404
        server {{ node1_name }} {{ node1_name }}:443 check check-ssl verify none
        server {{ node2_name }} {{ node2_fqdn }}:443 check check-ssl verify none
        server {{ node3_name }} {{ node3_fqdn }}:443 check check-ssl verify none

